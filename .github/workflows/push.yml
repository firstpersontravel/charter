# This workflow will build and push a new container image to Amazon ECR,
# and then will deploy a new task definition to Amazon ECS, when a release is created
#
# To use this workflow, you will need to complete the following set-up steps:
#
# 1. Create an ECR repository to store your images.
#    For example: `aws ecr create-repository --repository-name my-ecr-repo --region us-east-2`.
#    Replace the value of `ECR_REPOSITORY` in the workflow below with your repository's name.
#    Replace the value of `aws-region` in the workflow below with your repository's region.
#
# 2. Create an ECS task definition, an ECS cluster, and an ECS service.
#    For example, follow the Getting Started guide on the ECS console:
#      https://us-east-2.console.aws.amazon.com/ecs/home?region=us-east-2#/firstRun
#    Replace the values for `service` and `cluster` in the workflow below with your service and cluster names.
#
# 3. Store your ECS task definition as a JSON file in your repository.
#    The format should follow the output of `aws ecs register-task-definition --generate-cli-skeleton`.
#    Replace the value of `task-definition` in the workflow below with your JSON file's name.
#    Replace the value of `container-name` in the workflow below with the name of the container
#    in the `containerDefinitions` section of the task definition.
#
# 4. Store an IAM user access key in GitHub Actions secrets named `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`.
#    See the documentation for each action used below for the recommended IAM policies for this IAM user,
#    and best practices on handling the access key credentials.

on: [push]
  # push:
  #   branches: [master]

name: Deploy to ECS

jobs:
  lint_agency:
    name: Lint agency
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Setup node
      uses: actions/setup-node@v1
      with:
        node-version: 12.x
    - name: Install dependencies
      run: cd apps/agency && npm -q install
    - name: Run lint
      run: cd apps/agency && CI=true npm run test

  build_travel:
    name: Build travel
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Setup node
      uses: actions/setup-node@v1
      with:
        node-version: 12.x
    - name: Install dependencies
      run: |
        cd apps/travel
        npm -q install
        npm -q -g install bower
        bower -q install
        ln -s `pwd`/../../fptcore ./node_modules
    - name: Build
      run: cd apps/travel && CI=true npm run build

  test_core:
    name: Test core
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Setup node
      uses: actions/setup-node@v1
      with:
        node-version: 12.x
    - name: Install dependencies
      run: cd fptcore && npm -q install
    - name: Run tests
      run: cd fptcore && CI=true npm run test

  test_hq:
    name: Test hq
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Setup node
      uses: actions/setup-node@v1
      with:
        node-version: 12.x
    - name: Install dependencies
      run: |
        (cd fptcore && npm -q install)
        (cd headquarters && npm -q install)
    - name: Run tests
      run: cd headquarters && CI=true npm run test

  build:
    name: Build and push image
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-2

    - name: Login to ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    # https://github.com/marketplace/actions/build-docker-images-using-cache
    - name: Build Image
      uses: whoan/docker-build-with-cache-action@v5
      with:
        username: "${{ secrets.AWS_ACCESS_KEY_ID }}"
        password: "${{ secrets.AWS_SECRET_ACCESS_KEY }}"
        registry: 875382849197.dkr.ecr.us-west-2.amazonaws.com
        image_name: charter
        image_tag: ${{ github.sha }}

  deploy:
    name: Deploy to staging ECS
    runs-on: ubuntu-latest
    needs: [build, test_core, test_hq, lint_agency, build_travel]
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Render Task Definition
      run: |
        sudo wget -q -O /usr/local/bin/yq https://github.com/mikefarah/yq/releases/download/3.3.0/yq_linux_amd64
        sudo chmod +x /usr/local/bin/yq
        /usr/local/bin/yq r -j $GITHUB_WORKSPACE/deploy/ecs/task.yaml > /tmp/staging-${{ github.sha }}.json
        sed -i 's/__IMAGE__/${{ steps.login-ecr.outputs.registry }}/charter:${{ github.sha }}/g' /tmp/staging-${{ github.sha }}.json
        sed -i 's/__ENVIRONMENT__/staging/g' /tmp/staging-${{ github.sha }}.json
        cat /tmp/staging-${{ github.sha }}.json
    - name: Deploy ECS Task Definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: /tmp/staging-${{ github.sha }}.json
        service: charter-staging
        cluster: charter
        wait-for-service-stability: true
